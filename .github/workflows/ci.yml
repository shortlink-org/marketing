name: Monorepo CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  GO_VERSION: '1.21'

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      newsletter: ${{ steps.changes.outputs.newsletter }}
      landing: ${{ steps.changes.outputs.landing }}
      ui: ${{ steps.changes.outputs.ui }}
      referral: ${{ steps.changes.outputs.referral }}
      report: ${{ steps.changes.outputs.report }}
      stats: ${{ steps.changes.outputs.stats }}
      gamification: ${{ steps.changes.outputs.gamification }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          newsletter:
            - 'newsletter/**'
          landing:
            - 'landing/**'
          ui:
            - 'ui/**'
          referral:
            - 'referral/**'
          report:
            - 'report/**'
          stats:
            - 'stats/**'
          gamification:
            - 'gamification/**'

  newsletter-test:
    name: Newsletter Service Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.newsletter == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: newsletter_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.82
        components: rustfmt, clippy

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          newsletter/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('newsletter/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev protobuf-compiler

    - name: Check formatting
      working-directory: ./newsletter
      run: cargo fmt --all -- --check

    - name: Run Clippy
      working-directory: ./newsletter
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      working-directory: ./newsletter
      run: cargo build --verbose

    - name: Run all tests
      working-directory: ./newsletter
      run: |
        cargo test --lib --bins
        cargo test --test cucumber_simple
        cargo test --test cucumber_expressions
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/newsletter_test

  landing-test:
    name: Landing Page Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.landing == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: landing/package-lock.json

    - name: Install dependencies
      working-directory: ./landing
      run: npm ci

    - name: Run tests
      working-directory: ./landing
      run: npm test

    - name: Build
      working-directory: ./landing
      run: npm run build

  ui-test:
    name: UI Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.ui == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json

    - name: Install dependencies
      working-directory: ./ui
      run: npm ci

    - name: Run tests
      working-directory: ./ui
      run: npm test

    - name: Build
      working-directory: ./ui
      run: npm run build

  referral-test:
    name: Referral Service Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.referral == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      working-directory: ./referral
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      working-directory: ./referral
      run: python -m pytest tests/

  report-test:
    name: Report Service Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.report == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      working-directory: ./report
      run: go mod download

    - name: Run tests
      working-directory: ./report
      run: go test -v ./...

    - name: Build
      working-directory: ./report
      run: go build -v ./...

  stats-test:
    name: Stats Service Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.stats == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.20'

    - name: Install Conan
      run: |
        pip install conan==2.0.5
        conan profile detect --force

    - name: Build
      working-directory: ./stats
      run: |
        conan install . --build=missing
        cmake --preset conan-default
        cmake --build --preset conan-release

    - name: Run tests
      working-directory: ./stats
      run: ctest --preset conan-default

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [newsletter-test, landing-test, ui-test, referral-test, report-test, stats-test]
    if: github.ref == 'refs/heads/develop' && always() && !contains(needs.*.result, 'failure')
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [newsletter-test, landing-test, ui-test, referral-test, report-test, stats-test]
    if: github.ref == 'refs/heads/main' && always() && !contains(needs.*.result, 'failure')
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your deployment commands here